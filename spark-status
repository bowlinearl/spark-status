#!/usr/bin/python3

# Original script by Muhammad Ahmad Bashir (ahmad@ccs.neu.edu)
# Modified by Christo Wilson (cbw@ccs.neu.edu)

import os, sys, argparse, json
import urllib3, requests

SPARK_MASTER_SCHEME = 'http'
SPARK_MASTER_PORT   = 18081
CONF_FILE_FRAGMENT  = '../conf/spark-defaults.conf'
EXCLUSIONS          = ['URL:', 'REST URL:']
APP_COLUMNS         = 8
APP_FINISHED        = 'FINISHED'

parser = argparse.ArgumentParser(description='Get the status of a Spark cluster, such as living nodes, CPU usage, and current and historical applications.')
parser.add_argument('-c', '--conf', nargs='?', default=None,
                    help='The full path to the Spark configuration file. The hostname for the Spark Master will be read from this file, unless the URL is provided on the command line.')
parser.add_argument('-u', '--url', nargs='?', default=None,
                    help='The full URL for the Spark Master. If not specified, the URL will be determined from the Spark configuration file.')
parser.add_argument('-a', '--all', action='store_true',
                    help='Display all application attributes, including ID.')
parser.add_argument('-f', '--finished', action='store_true',
                    help='Display finished applications.')
parser.add_argument('-w', '--workers', action='store_true',
                    help='Display information about the workers.')
args = parser.parse_args()

def get_conf_file_path():
    return os.path.abspath(os.path.join(os.path.split(os.path.abspath(__file__))[0],
                                        CONF_FILE_FRAGMENT))

def get_spark_master(conf_file_path):
    with open(conf_file_path) as cf:
        for line in cf:
            line = line.strip()
            if len(line) == 0 or line[0] == '#': continue
            if line.index('spark.master') == 0:
                return line.split()[1]

def get_hostname(url):
    return urllib3.util.url.parse_url(url).host

def get_spark_master_url(host):
    return SPARK_MASTER_SCHEME + '://' + host + ':' + str(SPARK_MASTER_PORT) + '/json/'

#suffixes = ('B', 'KB', 'MB', 'GB', 'TB', 'PB')
suffixes = ('MB', 'GB', 'TB', 'PB')
def humansize(nbytes):
    i = 0
    while nbytes >= 1024 and i < len(suffixes)-1:
        nbytes /= 1024.0
        i += 1
    f = ('{:.2f}'.format(nbytes)).rstrip('0').rstrip('.')
    return '{} {}'.format(f, suffixes[i])

buckets = (
    (1000, 'ms'),
    (60, 's'),
    (60, 'm'),
    (24, 'h'),
)
def humantime(delta):
    for lim, pfx in buckets:
        if delta < lim:
            return '{:.1f} {}'.format(delta, pfx)
        delta /= lim
    return '{:.1f} d'.format(delta)

null_func = lambda x: x
fields = (
    ('Status', 'status', null_func),
    ('Alive Workers', 'aliveworkers', null_func),
    ('Cores', 'cores', null_func),
    ('Cores Used', 'coresused', null_func),
    ('Memory', 'memory', humansize),
    ('Memory Used', 'memoryused', humansize),
    ('Active Apps', 'activeapps', len),
    ('Completed Apps', 'completedapps', len)
)
def print_main_info(data):
    for hdr, field, xform in fields:
        print('{:14} : {:>7}'.format(hdr, xform(data[field])))

app_attributes = ("id", "starttime", "name", "cores", "user", "memoryperslave", "submitdate", "state", "duration")
def print_applications(applist):        
    for app in applist:
        app['duration'] = humantime(app['duration'])
        if args.all:
            app['name'] = app['name'][:15]
            app['memoryperslave'] = humansize(app['memoryperslave'])
            print('{0[id]}  {0[name]:15}  {0[cores]:>3}  {0[memoryperslave]}  {0[submitdate]}  {0[user]:10}  {0[state]:8}  {0[duration]}'.format(app))
        else:
            app['name'] = app['name'][:40]
            print('{0[name]:40}  {0[submitdate]}  {0[user]:10}  {0[duration]}'.format(app))

worker_attributes = (
    "id", "host", "port", "webuiaddress", "cores", "coresused", "coresfree", "memory", "memoryused", "memoryfree", "state", "lastheartbeat"
)
def print_workers(workers):
    for wkr in workers:
        wkr['memory'] = humansize(wkr['memory'])
        wkr['memoryused'] = humansize(wkr['memoryused'])
        hn = '{0[host]}:{0[port]}'.format(wkr)
        print('{0[id]:54}  {1:32}  {0[state]:8}  {0[cores]}  {0[coresused]}  {0[memory]}  {0[memoryused]}'.format(wkr, hn))

def print_status(url):
    data = json.loads(requests.get(url).text)

    print('# Cluster Status')
    print_main_info(data)

    print('\n# Active Applications')
    print_applications(data['activeapps'])

    if args.finished:
        print('\n# Completed Applications')
        print_applications(reversed(data['completedapps']))

    if args.workers:
        print('\n# Workers')
        print_workers(sorted(data['workers'], key=lambda wkr: wkr['host']))
        
conf_file_path = args.conf if args.conf else get_conf_file_path()
sm_url = arg.url if args.url else \
         get_spark_master_url(get_hostname(get_spark_master(conf_file_path)))

print_status(sm_url)
